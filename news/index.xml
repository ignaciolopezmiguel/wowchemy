<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>News | Ignacio D. Lopez-Miguel</title><link>https://ignaciolopezmiguel.github.io/news/</link><atom:link href="https://ignaciolopezmiguel.github.io/news/index.xml" rel="self" type="application/rss+xml"/><description>News</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 30 Jun 2023 00:00:00 +0000</lastBuildDate><image><url>https://ignaciolopezmiguel.github.io/media/icon_hu7c08691dc8dbdd8a44d0119594fadcbe_280951_512x512_fill_lanczos_center_3.png</url><title>News</title><link>https://ignaciolopezmiguel.github.io/news/</link></image><item><title>Paper accepted at the European Conference on Artificial Intelligence (ECAI)</title><link>https://ignaciolopezmiguel.github.io/news/ecai23/</link><pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate><guid>https://ignaciolopezmiguel.github.io/news/ecai23/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>In recent years, there has been growing interest in the application of temporal reasoning approaches and non-monotonic logics from artificial intelligence in dynamic systems that generate data.
A well-known approach to temporal reasoning is the use of a progression technique, which allows for the online computation of logical consequences of a logical knowledge base over time. We consider
a progression technique for Temporal Here and There and Temporal Equilibrium Logic, which is the logic underlying answer programming over linear-temporal logic (LTL). Compared to usual LTL online computation,
where the goal is to check whether a trace is compliant with a temporal specification, our approach provides also the means to compute non-monotonic temporal reasoning over a trace of
observations. Besides formal notions and results, we also present an algorithm for performing progression to monitor a dynamic system, which has been implemented as a proof of concept and allows for
handling expressive application scenarios.&lt;/p></description></item><item><title>Paper accepted at the Engineering Applications of Neural Networks conference</title><link>https://ignaciolopezmiguel.github.io/news/eann23/</link><pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate><guid>https://ignaciolopezmiguel.github.io/news/eann23/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>In the last few years, control engineers have started to use artificial neural networks (NNs) embedded in advanced feedback control algorithms. Its natural integration into existing controllers, such as programmable logic controllers (PLCs) or close to them, represents a challenge.
Besides, the application of these algorithms in critical applications still raises concerns among control engineers due to the lack of safety guarantees.
Building trustworthy NNs is still a challenge and their verification is attracting more attention nowadays.
This paper discusses the peculiarities of formal verification of NNs controllers running on PLCs. It outlines a set of properties that should be satisfied by a NN that is intended to be deployed in a critical high-availability installation at CERN. It compares different methods to verify this NN and sketches our future research directions to find a safe NN.&lt;/p></description></item><item><title>Paper accepted at the NASA Formal Methods Symposium</title><link>https://ignaciolopezmiguel.github.io/news/nfm23/</link><pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate><guid>https://ignaciolopezmiguel.github.io/news/nfm23/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>PLCverif is an actively developed project at CERN, enabling the formal verification of Programmable Logic Controller (PLC) programs in critical systems. In this paper, we present our work on improving the formal requirements specification experience in PLCverif through the use of natural language. To this end, we integrate NASA’s FRET, a formal requirement elicitation and authoring tool, into PLCverif. FRET is used to specify formal requirements in structured natural language, which automatically translates into temporal logic formulae. FRET’s output is then directly used by PLCverif for verification purposes. We discuss practical challenges that PLCverif users face when authoring requirements and the FRET features that help alleviate these problems. We present the new requirement formalization workflow and report our experience using it on two critical CERN case studies.&lt;/p>
&lt;h2 id="see-you-in-houston">See you in Houston!&lt;/h2></description></item></channel></rss>